# -*- coding: utf-8 -*-
"""
Created on April 29 2019

@author: Khanh-Hung TRAN
@work : CEA Saclay, France
@email : khanhhung92vt@gmail.com or khanh-hung.tran@cea.fr
"""

import pdb
import json
import numpy as np
from SSDL_GU import *
from sklearn.decomposition import SparseCoder
from numpy.linalg import norm
import sys
from sklearn import preprocessing
from sklearn.neighbors import NearestNeighbors

""" Take mnist from keras """  
# from keras.datasets import mnist
# (data, labels), _ = mnist.load_data()
# data = data.reshape(60000, 28*28).astype('float32')
# labels = np.array(labels)

def load_local_json_to_obj(path):
    str = open(path, encoding="utf-8").read()
    return np.array(json.loads(str))

def test(inputs):
    Y_test=inputs.reshape(784,1)

    n_classes = 10


    """ Parameters in optimization  """
    n_atoms = 200
    n_neighbor = 8
    lamda = 0.5
    beta = 1.
    gamma = 1.
    mu = 2.*gamma
    seed = 0
    r = 2.
    c = 1.

    n_iter = 15
    n_iter_sp = 50
    n_iter_du = 50 

    seed = 0 # to save the way initialize dictionary
    n_iter_sp = 50 #number max of iteration in sparse coding
    n_iter_du = 50 # number max of iteration in dictionary update
    n_iter = 15 # number max of general iteration
    X_all = load_local_json_to_obj("X_all.txt")
    Y_all = load_local_json_to_obj("Y_all.txt")
    D = load_local_json_to_obj("D.txt")
    W = load_local_json_to_obj("W.txt")
    b = load_local_json_to_obj("b.txt")
    """ To see accuracy for labelled samples and for unlabelled samples (in training phase) """
    #    X_labelled = X_all[:,:n_labelled]
    #    X_unlabelled = X_all[:,n_labelled:]
    #    
    #    n_correct_train_cl = np.array([y[i] == np.argmax(np.dot(W, X_labelled[:, i])+b)
    #                                      for i in range(X_labelled.shape[1])]).nonzero()[0].size/float(X_labelled.shape[1])
    #    
    #    n_correct_unlabelled_cl = np.array([y_unlabelled[i] == np.argmax(np.dot(W, X_unlabelled[:, i])+b)
    #                                      for i in range(X_unlabelled.shape[1])]).nonzero()[0].size/float(X_unlabelled.shape[1])

    """ Sparse coding for testing samples if beta != 0 (with manifold structure preservation) """

    n_test = np.shape(Y_test)[1]
    bb1 = np.zeros((n_atoms,n_test))
    neigh = NearestNeighbors(n_neighbors=n_neighbor+1)
    neigh.fit(Y_all.T)

    for i in range(n_test):
        a = inputs
        indice_test = neigh.kneighbors(np.atleast_2d(a), n_neighbor, return_distance=False)[0]
        weight_all = np.zeros(Y_all.shape[1])

        C = np.zeros((n_neighbor,n_neighbor))
        for k in range (n_neighbor):
            for l in range(k,n_neighbor):
                C[k,l] = np.sum((a - Y_all[:,indice_test[k]]) * (a - Y_all[:,indice_test[l]]))
                if k != l:
                    C[l,k] = C[k,l]
        if np.linalg.cond(C) > 1/sys.float_info.epsilon :
            C = C + (np.trace(C) * 0.1) * np.eye(n_neighbor)
            if np.linalg.cond(C) > 1/sys.float_info.epsilon :
                print("please check matrix C, not invertible")        
            
        invC = np.linalg.linalg.inv(C)
        denum = np.sum(invC)
        for k in range (n_neighbor):            
            weight_all[indice_test[k]] = np.sum(invC[k,:])/denum
        bb1[:,i] = np.dot(X_all,weight_all)

        
    _Y = np.vstack((Y_test,np.sqrt(beta)*bb1))
    _D = np.vstack((D, np.sqrt(beta) * np.eye(n_atoms)))
    coder = SparseCoder(dictionary=_D.T,transform_alpha=lamda/2., transform_algorithm='lasso_cd')
    # coder = SparseCoder(dictionary=D.T,transform_alpha=lamda/2., transform_algorithm='lasso_cd')
    X_test =coder.transform(_Y.T).T

    res=np.argmax(np.dot(W, X_test[:, i])+b)

        
    """ Results """ 

    print("res :" + str(res))   

test_inputs
test(np.array(test_inputs))